;; Variables

(defpoll monitors :interval "1m" "hyprctl monitors -j | jq -rc '[ .[].id ] | sort_by( . )'")
(defpoll clock_time :interval "5s" "date '+\%l\%M \%p'")
(defpoll clock_date :interval "10h" "date '+%b %d, %Y'")
(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")
(defpoll volume_percent :interval "1s"  "scripts/sbvol --get")
(defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll COL_WLAN :interval "1m" "scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "1m" "scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "1m" "scripts/wifi --ICON")
(defpoll title		:interval "1s" "scripts/music title")
(defpoll artist		:interval "1s" "scripts/music artist")
(defpoll playpause	:interval "1s" "scripts/music statusicon")

(deflisten workspaces :initial "(box (label :text \"Home          \" ))"
	`python scripts/workspaces.py`)

(deflisten cava "scripts/cava-internal")

(defvar vol_reveal false)
(defvar br_reveal false)
(defvar midwidget_reveal false)
(defvar music_reveal false)
(defvar control_reveal false)
(defvar visualizer_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)


;;  Music Widgets
(defwidget music-side [] 
    (revealer
    :transition "slideleft"
	:reveal midwidget_reveal
	:duration "350ms" 
    (eventbox
    :onhover "${EWW_CMD} update music_reveal=true"
	:onhoverlost "${EWW_CMD} update music_reveal=false" 
    (box 	
	    :class "music-player"
		:orientation "h" 
		:space-evenly "false"  
		:halign "center"
        :valign "start"
        :hexpand "true"
        :width ""

        (box
            :orientation "h" 
		 	:space-evenly "false"
		 	:valign "center"
			:halign "center"
            (revealer   
            	:transition "slideleft"
			    :reveal music_reveal
			    :duration "350ms" 
	        (box
	            :orientation "h"  
		 	        :space-evenly "false"
			        :valign "center"
			        :halign "center"
			        :spacing 15
			        (button :class "btn_prev" :onclick "scripts/music previous" "玲")
			        (button :class "btn_play" :onclick "scripts/music toggle" playpause)
			        (button :class "btn_next" :onclick "scripts/music next" "怜")      
            ))
        )
        (button
        :onclick "if ${EWW_CMD} state | grep 'visualizer_reveal: false' ; then ${EWW_CMD} update visualizer_reveal=true ; else ${EWW_CMD} update visualizer_reveal=false ; fi"  
	    (box 	
	        :orientation "h" 
		 	:space-evenly "false"
		 	:valign "center"
			:halign "center"
            (label  
 	            :class "song"
		 	    :limit-width 50
		 	    :text title)
            (label
                :class "song-gap"
                :text " - "
            )
	        (label  
	            :class "artist"
		 	    :limit-width 50
		 	    :text artist)
        ))   
    ))))


(defwidget cava []
    (revealer   
        :transition "slideright"
		:reveal visualizer_reveal
		:duration "350ms" 
	    (box
	        :orientation "h"  
		    :space-evenly "false"
			:valign "center"
			:halign "center"
			:spacing 25
            (label :vexpand "false" :hexpand "false" :space-evenly "false"
                :class "cavabar"
                :text cava
            )
        )
    )
)

;; widgets

(defwidget launcher []
  (box
    :class "launcher_module"
    :orientation "h"
    (button
      :onclick "rofi -no-lazy-grab -show drun -theme ~/.config/rofi/launcher.rasi &"
      (image
        :class "launcher-icon"
        :path "images/arch-grey.png"
      :image-width 35))
  ))

(defwidget workspaces []
  (eventbox
  :onscroll "hyprctl dispatch workspace e+1" 
  (button
  :onclick "hyprctl dispatch workspace e-1" 
  :onrightclick "hyprctl dispatch workspace e+1"
  (box
    :class "workspaces"
    :halign "left"
  (literal 
    :content "${workspaces}")))))

(defwidget volume []
  (eventbox 
    :onhover "${EWW_CMD} update vol_reveal=true"
	:onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box
        :class "module-2"
        :space-evenly "false"
        :orientation "h"
        :spacing "3" 
	        (revealer 
	            :transition "slideright"
			    :reveal vol_reveal
			    :duration "350ms"
	            (scale  
	                :class "volbar"
			        :value volume_percent
			        :orientation "h"
			        :max 100
			        :min 0
			        :onchange "amixer sset Master {}%" ))
	        (button
	            :class "volume_icon"
	            "墳"))))

(defwidget wifi [] 
  (eventbox 
    :onhover "${EWW_CMD} update wifi_rev=true"
	:onhoverlost "${EWW_CMD} update wifi_rev=false"
	(box
	    :vexpand "false"
	    :hexpand "false"
	    :space-evenly "false"
	    (revealer 
	        :transition "slideright"
		    :reveal wifi_rev
			:duration "350ms"
	        (label
	            :class "module_essid"
			    :text ESSID_WLAN
			  ))
		(button
		    :class "module-wif"
		    :onclick "networkmanager_dmenu"
		    WLAN_ICON))))

(defwidget bat []
		(box
		    :class "bat_module"
		    :vexpand "false"
		    :hexpand "false" 
            (circular-progress
                :value {EWW_BATTERY["BAT0"].capacity}
                :class "batbar"
                :thickness 4
                (button 
                    :class "iconbat"
                    :limit-width 2
                    :tooltip "battery on ${EWW_BATTERY["BAT0"].capacity}%"
                    :show_truncated false
                    :onclick "${EWW_CMD} open --toggle system"
                    :wrap false
                    ""))))

(defwidget mem []
		(box :class "mem_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value {EWW_RAM.used_mem_perc}
                :class "membar"
                :thickness 4
            (button 
                :class "iconmem"
                :limit-width 2
                :tooltip "using ${EWW_RAM.used_mem_perc}% ram"
                :onclick "${EWW_CMD} open --toggle system"
                :show_truncated false
                :wrap false
                ""))))

(defwidget clock_module []
  (eventbox
    :onhover "${EWW_CMD} update time_rev=true"
  	:onhoverlost "${EWW_CMD} update time_rev=false"
    (button
        :onclick "if ${EWW_CMD} state | grep 'midwidget_reveal: false' ; then ${EWW_CMD} update midwidget_reveal=true ; else ${EWW_CMD} update midwidget_reveal=false ; fi"  
	    :onrightclick "if ${EWW_CMD} state | grep 'visualizer_reveal: false' ; then ${EWW_CMD} update visualizer_reveal=true ; else ${EWW_CMD} update visualizer_reveal=false ; fi" 
      (box
          :class "module"
          :space-evenly "false"
          :orientation "h"
          :spacing "0" 
          (label
              :text clock_time
              :class "clock_time_class" )
          (revealer :transition "slideleft"
  		    :reveal time_rev
  		    :duration "350ms"
              (button 
                  :class "clock_date_class"
                  :onclick "${EWW_CMD} open --toggle calendar" clock_date))))))

(defwidget notif_button []
  (box
    :class "notif_button"
    :space-evenly "false"
    :orientation "h"
    (button
	    :onclick "if ${EWW_CMD} state | grep 'rightside: false' ; then ${EWW_CMD} update rightside=true ; else ${EWW_CMD} update rightside=false ; fi"
      (label
      :text ""))))
  
(defwidget sep []
  (box 
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    (label
        :class "separ"
        :text "|")))

(defwidget gap []
  (box 
    :orientation "h"
    :hexpand "false"
    :visible "true"
    :width "150"))


;;define widget groups
(defwidget left []
	(box 
	    :orientation "h" 
		:space-evenly false  
        :halign "start"
		:class "left_modules"
    (launcher)
    (workspaces)))

(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
    (music-side)
    (cava)     
    ))
(defwidget right []
	(box
	    :orientation "h" 
		:space-evenly false  
        :halign "end"
		:class "right_modules"
    (volume)
    (wifi)
    (clock_module)
))

;;Define bar
(defwidget bar_layout []
  (centerbox 
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
    ))
(defwindow bar0
    :exclusive false
    :monitor 0
    :geometry (geometry 
        :x "0px"
        :y "0px"
        :width "100%"
        :height "60px"
        :anchor "top center")
    :stacking "fg"
    :windowtype "dock"
    :exclusive true
    (bar_layout))
(defwindow bar1
    :exclusive false
    :monitor 1
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "98%"
        :height "30px"
        :anchor "top center")
    :stacking "bg"
    :windowtype "dock"
    (bar_layout))
(defwindow bar2
    :exclusive false
    :monitor 2
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "98%"
        :height "30px"
        :anchor "top center")
    :stacking "bg"
    :windowtype "dock"
    (bar_layout))



(defwidget audio []
	(box 
	    :class "audio-box"
	    :orientation "v"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false"
	    (box 
	        :halign "v"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "speaker_icon"
	            :orientation "v")
	        (box 
	            :orientation "v"
	            :halign "center"
	            :vexpand "false"
	            :hexpand "false"
                (label
                    :class "speaker_text"
                    :text "speaker"
                    :valign "center"
                    :halign "left" )
	            (box
	                :class "speaker_bar"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
	                (scale
	                    :value volume_percent
                        :space-evenly "false"
			            :orientation "h"
			            :onchange "amixer -D pulse sset Master {}%" 
                        :tooltip "volume on ${volume_percent}%"
			            :max 100
			            :min 0))))
        (label
            :text "_____________________________________"
            :class "audio_sep"
            :halign "center")
	    (box 
	        :halign "v"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "mic_icon"
	            :orientation "v")
	            (box 
	                :orientation "v"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
                    (label
                        :class "mic_text"
                        :text "mic"
                        :valign "center"
                        :halign "left" )
	                (box 
	                    :class "mic_bar"
	                    :halign "center"
	                    :vexpand "false"
	                    :hexpand "false"
	                    (scale
	                        :value mic_percent
                            :space-evenly "false"
			                :orientation "h"
                            :tooltip "mic on ${mic_percent}%"
			                :onchange "amixer -D pulse sset Capture {}%" 
			                :max 100
			                :min 0))))))
(defwindow audio_ctl
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry 
        :x "20" 
		:y "7%" 
        :anchor "top right"
		:width "280px" 
		:height "60px")
    (audio))


;;Define System widget  
(defwidget system []
  (box 
    :class "sys_win"
    :orientation "v"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_bat_box"
        :orientation "h"
        :space-evenly "false"
        (circular-progress
            :value {EWW_BATTERY["BAT0"].capacity}
            :class "sys_bat"
            :thickness 9
            (label :text ""
                :class "sys_icon_bat"
                :limit-width 2
                :show_truncated false
                :wrap false))
        (box 
            :orientation "v" 
            :space-evenly "false" 
            :spacing 0 
            :hexpand "false"
            :vexpand "false"
            (label
                :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label 
                :text "${EWW_BATTERY["BAT0"].capacity}%"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label
                :text "${EWW_BATTERY["BAT0"].status}"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))
    (label
        :text "____________________________________"
        :class "sys_sep"
        :halign "center")
    (box 
        :class "sys_mem_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value {EWW_RAM.used_mem_perc}
            :class "sys_mem"
            :thickness 9
            (label
                :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "v"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label
                :text "${round((EWW_RAM.available_mem / 1024), 0)} | ${round((EWW_RAM.total_mem / 1024), 0)}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label 
                :text "${round((EWW_RAM.used_mem / 1024), 0)}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :wrap false)
            ))))
(defwindow system
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
        :x "20px" 
	:y "10px" 
        :anchor "top right"
			:width "290px" 
			:height "120px")
    (system))




;;Calendar Widget
(defwidget cal []
	(box 
	    :class "cal"
	    :orientation "v"
	    (box
	        :class "cal-in"
	        (calendar
			  :day calendar_day 
			  :year calendar_year))))
(defwindow calendar
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
        :x "10px" 
	    :y "10px" 
        :anchor "top right"
	    :width "270px" 
	    :height "60px")
(cal))
